"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const color_1 = require("@heroku-cli/color");
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const cli_ux_1 = require("cli-ux");
const flags_1 = require("../../../lib/flags");
const base_1 = require("../../../lib/base");
const utils_1 = require("../../../lib/utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'env.var.get');
class VarGet extends base_1.default {
    async run() {
        var _a;
        const { flags, args } = await this.parse(VarGet);
        // We support both versions of the flag here for the sake of backward compat
        const targetCompute = (_a = flags['target-compute']) !== null && _a !== void 0 ? _a : flags.environment;
        if (!targetCompute) {
            throw new core_2.Errors.CLIError(`Missing required flag:
        -c, --target-compute TARGET-COMPUTE  ${color_1.default.dim('Environment name.')}
       See more help with --help`);
        }
        if (flags.environment) {
            this.warn(messages.getMessage('flags.environment.deprecation'));
        }
        const appName = await (0, utils_1.resolveAppNameForEnvironment)(targetCompute);
        const { data: config } = await this.client.get(`/apps/${appName}/config-vars`);
        const value = config[args.key];
        if (flags.json) {
            if (!value) {
                cli_ux_1.cli.styledJSON({
                    status: 0,
                    result: null,
                    warnings: [`No config var named ${args.key} found for environment <${targetCompute}>`],
                });
                return;
            }
            cli_ux_1.cli.styledJSON({
                status: 0,
                result: value,
                warnings: [],
            });
        }
        else {
            if (!value) {
                this.warn(`No config var named ${color_1.default.cyan(args.key)} found for environment ${color_1.default.cyan(targetCompute)}`);
            }
            this.log(value);
        }
    }
}
exports.default = VarGet;
VarGet.summary = messages.getMessage('summary');
VarGet.description = messages.getMessage('description');
VarGet.examples = messages.getMessages('examples');
VarGet.flags = {
    'target-compute': flags_1.FunctionsFlagBuilder.environment({
        exclusive: ['environment'],
    }),
    environment: flags_1.FunctionsFlagBuilder.environment({
        char: 'e',
        exclusive: ['target-compute'],
        hidden: true,
    }),
    json: flags_1.FunctionsFlagBuilder.json,
};
VarGet.args = [
    {
        name: 'key',
        required: true,
    },
];
