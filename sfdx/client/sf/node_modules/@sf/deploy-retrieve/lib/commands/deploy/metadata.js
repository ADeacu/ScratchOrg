"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const output_1 = require("../../utils/output");
const progressBar_1 = require("../../utils/progressBar");
const types_1 = require("../../utils/types");
const deploy_1 = require("../../utils/deploy");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata');
class DeployMetadata extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(DeployMetadata);
        if (!(0, deploy_1.validateTests)(flags['test-level'], flags.tests)) {
            throw messages.createError('error.NoTestsSpecified');
        }
        const api = (0, deploy_1.resolveRestDeploy)();
        const { deploy, componentSet } = await (0, deploy_1.executeDeploy)({
            ...flags,
            'target-org': flags['target-org'].getUsername(),
            api,
        });
        const action = flags['dry-run'] ? 'Deploying (dry-run)' : 'Deploying';
        this.log((0, output_1.getVersionMessage)(action, componentSet, api));
        this.log(`Deploy ID: ${deploy.id}`);
        new progressBar_1.DeployProgress(deploy, this.jsonEnabled()).start();
        const result = await deploy.pollStatus(500, flags.wait.seconds);
        this.setExitCode(result);
        if (!this.jsonEnabled()) {
            (0, output_1.displayDeployResults)(result, flags['test-level'], flags.verbose);
            if (flags['dry-run'])
                this.log('Dry-run complete.');
        }
        return {
            jobId: result.response.id,
            files: result.getFileResponses() || [],
            tests: (0, deploy_1.getTestResults)(result),
        };
    }
    setExitCode(result) {
        if (result.response.status !== source_deploy_retrieve_1.RequestStatus.Succeeded) {
            process.exitCode = 1;
        }
    }
}
exports.default = DeployMetadata;
DeployMetadata.description = messages.getMessage('description');
DeployMetadata.summary = messages.getMessage('summary');
DeployMetadata.examples = messages.getMessages('examples');
DeployMetadata.requiresProject = true;
DeployMetadata.flags = {
    'api-version': sf_plugins_core_1.Flags.orgApiVersion({
        char: 'a',
        summary: messages.getMessage('flags.api-version.summary'),
        description: messages.getMessage('flags.api-version.description'),
    }),
    'dry-run': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.dry-run.summary'),
        default: false,
    }),
    'ignore-errors': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        summary: messages.getMessage('flags.ignore-errors.summary'),
        description: messages.getMessage('flags.ignore-errors.description'),
        default: false,
    }),
    'ignore-warnings': sf_plugins_core_1.Flags.boolean({
        char: 'g',
        summary: messages.getMessage('flags.ignore-warnings.summary'),
        description: messages.getMessage('flags.ignore-warnings.description'),
        default: false,
    }),
    manifest: sf_plugins_core_1.Flags.file({
        char: 'x',
        description: messages.getMessage('flags.manifest.description'),
        summary: messages.getMessage('flags.manifest.summary'),
        exactlyOne: ['manifest', 'source-dir', 'metadata'],
        exists: true,
    }),
    metadata: sf_plugins_core_1.Flags.string({
        char: 'm',
        summary: messages.getMessage('flags.metadata.summary'),
        multiple: true,
        exactlyOne: ['manifest', 'source-dir', 'metadata'],
    }),
    'source-dir': sf_plugins_core_1.Flags.string({
        char: 'd',
        description: messages.getMessage('flags.source-dir.description'),
        summary: messages.getMessage('flags.source-dir.summary'),
        multiple: true,
        exactlyOne: ['manifest', 'source-dir', 'metadata'],
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({
        char: 'o',
        description: messages.getMessage('flags.target-org.description'),
        summary: messages.getMessage('flags.target-org.summary'),
    }),
    tests: sf_plugins_core_1.Flags.string({
        char: 't',
        multiple: true,
        summary: messages.getMessage('flags.tests.summary'),
        description: messages.getMessage('flags.tests.description'),
        default: [],
    }),
    'test-level': (0, deploy_1.testLevelFlag)({
        default: types_1.TestLevel.NoTestRun,
        description: messages.getMessage('flags.test-level.description'),
        summary: messages.getMessage('flags.test-level.summary'),
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
        unit: 'minutes',
        defaultValue: 33,
        helpValue: '<minutes>',
        min: 1,
    }),
};
DeployMetadata.configurationVariablesSection = (0, sf_plugins_core_1.toHelpSection)('CONFIGURATION VARIABLES', core_1.OrgConfigProperties.TARGET_ORG, core_1.SfdxPropertyKeys.API_VERSION);
DeployMetadata.envVariablesSection = (0, sf_plugins_core_1.toHelpSection)('ENVIRONMENT VARIABLES', core_1.EnvironmentVariable.SF_TARGET_ORG, core_1.EnvironmentVariable.SF_USE_PROGRESS_BAR);
//# sourceMappingURL=metadata.js.map